import sounddevice as sd
import wavio
import os
import numpy as np
from config import AUDIO_DIRECTORY  # Certifique-se de que AUDIO_DIRECTORY est√° configurado corretamente

def select_device():
    """
    Lista os dispositivos dispon√≠veis e solicita que o usu√°rio selecione o √≠ndice desejado.
    """
    devices = sd.query_devices()
    print("Dispositivos dispon√≠veis:")
    for i, device in enumerate(devices):
        name = device.get('name', 'Unknown')
        max_in = device.get('max_input_channels', 0)
        max_out = device.get('max_output_channels', 0)
        print(f"{i}: {name} ({max_in} in, {max_out} out)")
    
    while True:
        try:
            selected = int(input("üëâ Selecione o √≠ndice do dispositivo desejado: "))
            if 0 <= selected < len(devices):
                return selected
            else:
                print("‚ùå √çndice inv√°lido. Tente novamente.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Por favor, digite um n√∫mero.")

def record_system_audio_until_stop(fs=44100, channels=2, filename="system_audio.wav"):
    """
    Grava o √°udio do sistema indefinidamente at√© que o usu√°rio pressione 's' e Enter.
    
    Par√¢metros:
      fs (int): taxa de amostragem (padr√£o 44100 Hz).
      channels (int): n√∫mero de canais desejados (padr√£o 2).
      filename (str): nome do arquivo de √°udio a ser salvo.
      
    Retorna:
      file_path (str): caminho completo para o arquivo de √°udio gravado.
    """

    while True:
        device_index = select_device()
        device_info = sd.query_devices(device_index)
        max_input_channels = device_info.get('max_input_channels', 0)
        if max_input_channels < 1:
            print("‚ùå O dispositivo selecionado n√£o possui canais de entrada. Por favor, selecione outro dispositivo.")
        else:
            if channels > max_input_channels:
                print(f"‚ö†Ô∏è O dispositivo suporta apenas {max_input_channels} canal(is). Ajustando para {max_input_channels}.")
                channels = max_input_channels
            break

    frames = []

    def callback(indata, frame_count, time_info, status):
        if status:
            print(status)
        frames.append(indata.copy())

    print("üéôÔ∏è Gravando √°udio... Pressione 's' e Enter para parar a grava√ß√£o.")
    with sd.InputStream(callback=callback, samplerate=fs, channels=channels, device=device_index):
        # Aguardando o comando para parar a grava√ß√£o
        while True:
            if input().strip().lower() == 's':
                break

    # Concatena todos os blocos de √°udio gravados
    all_data = np.concatenate(frames, axis=0)
    file_path = os.path.join(AUDIO_DIRECTORY, filename)
    wavio.write(file_path, all_data, fs, sampwidth=2)
    print(f"üîä √Åudio salvo em: {file_path}")
    return file_path